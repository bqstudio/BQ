// -----------------------------------------------------------------------------
// This file contains all application-wide Sass functions.
// -----------------------------------------------------------------------------

/// Native `url(..)` function wrapper
/// @param {String} $base - base URL for the asset
/// @param {String} $type - asset type folder (e.g. `fonts/`)
/// @param {String} $path - asset path
/// @return {Url}
@function asset($base, $type, $path) {
  @return url($base + $type + $path);
}

/// Returns URL to an image based on its path
/// @param {String} $path - image path
/// @param {String} $base [$base-url] - base URL
/// @return {Url}
/// @require $base-url
@function image($path, $base: $base-url) {
  @return asset($base, 'images/', $path);
}

/// Returns URL to a font based on its path
/// @param {String} $path - font path
/// @param {String} $base [$base-url] - base URL
/// @return {Url}
/// @require $base-url
@function font($path, $base: $base-url) {
  @return asset($base, 'fonts/', $path);
}



// Media Query Map
@mixin responsive($width) {
  @if map-has-key($breakpoints, $width) {
    $width: map-get($breakpoints, $width);
    @media only screen and (max-width: $width) {
      @content;
    }
  } @else {
    @warn "No value could be retrieved from `#{$width}`. Available breakpoints are: #{map-keys($breakpoints)}.";
  }
}

// Media Query Map
@mixin responsiveMin($width) {
  @if map-has-key($breakpoints, $width) {
    $width: map-get($breakpoints, $width);
    @media only screen and (min-width: $width) {
      @content;
    }
  } @else {
    @warn "No value could be retrieved from `#{$width}`. Available breakpoints are: #{map-keys($breakpoints)}.";
  }
}

/*
tr( duracion, propiedades, delay)
*/ 
@mixin tr($d: 0.5s, $e: all, $delay: 0s) {
  transition: $e $d ease-out;
  transition-delay: $delay;
}


/*
tre( duracion, propiedades, delay)
a diferencia de tr(), tre tiene un easign aplicado que hace la animacion mas natural
*/ 
@mixin tre($d: 0.5s, $e: all, $delay: 0s) {
  transition: $e $d cubic-bezier(0.165, 0.840, 0.440, 1.000);
  transition-delay: $delay;
}

/*
fade( x, y );
AÃ±ade transformacion x e y, y opacity 0 al elemento.
Se pueden pasar valores negativos, por ejemplo, para desplazar x hacia la izquierda
Tambien se puede pasar un porcentaje
*/
@mixin fade($x: 0px, $y: 0px, $transition: true, $delay: 0) {
  opacity: var( --fade-opacity, 0 );
  transform: var( --fade-transform, translateX($x) translateY($y) );

  @if $transition{
    transition: $transition-default;
  }

  @if $delay > 0{
    transition-delay: $transition-default-delay * $delay;
  }

}

.in{
  --fade-opacity: 1;
  --fade-transform: translateX(0px) translateY(0px);
  --p100: 100%;
  --v1: 1;
}

/*
fadein();
Aplica transformX(0px), transformY(0px) y opacity 1 para hacer aparecer el objecto
*/
@mixin fadein() {
  opacity: 1; 
  transform: translateX(0px) translateY(0px);
}


@function clamp-calc($min-width, $max-width, $size-at-min-width, $size-at-max-width) {
  $slope: ($size-at-max-width - $size-at-min-width) / ($max-width - $min-width);
  $slope: round($slope * 1000) / 1000;
  $y-axis-intersection: -1 * $min-width * $slope + $size-at-min-width;
  $y-axis-intersection: round($y-axis-intersection * 1000) / 1000;
  $return-value: clamp(#{$size-at-min-width}, #{$y-axis-intersection} + #{$slope} * 100vw, #{$size-at-max-width});
  @return $return-value;  
}

@function rv( $small, $large ) {
  @return clamp-calc( map-get($breakpoints,'mobile-v'), map-get($breakpoints,'tablet-h'),   $small, $large );
}
